var N=null,E="",T="t",U="u",searchIndex={};
var R=["asciichar","option","toasciicharerror","Constructs an ASCII character from a `u8`, `char` or other…","Check if the character is a letter or number","Checks if the character is alphabetic and lowercase (a-z).","Checks if the character is alphabetic and uppercase (A-Z).","from_ascii","result","asciistr","asasciistrerror","from_ascii_unchecked","eq_ignore_ascii_case","make_ascii_uppercase","make_ascii_lowercase","Returns the ascii string slice with the remaining…","description","Returns a description for this error, like…","Convert a subslice to an ASCII slice.","borrow_mut","try_from","try_into","type_id","into_iter","borrow","typeid","to_ascii_char","to_ascii_char_unchecked","slice_ascii","as_ascii_str","as_ascii_str_unchecked","get_ascii","slice_ascii_mut","as_mut_ascii_str_unchecked","ordering","partial_cmp","formatter","index_mut","rangefrom","rangefull","rangeinclusive","rangetoinclusive","next_back","size_hint","as_ref","Convert to an ASCII slice.","Get a single ASCII character from the slice.","as_mut_ascii_str","Convert to a mutable ASCII slice.","AsciiChar","ToAsciiCharError","AsciiStr","CharsMut","CharsRef","AsAsciiStrError","ToAsciiChar","AsAsciiStr","AsMutAsciiStr"];

searchIndex["ascii"]={"doc":"A library that provides ASCII-only string and character…","i":[[3,R[50],"ascii","Error returned by `ToAsciiChar`.",N,N],[3,R[51],E,"AsciiStr represents a byte or string slice that only…",N,N],[3,R[54],E,"Error that is returned when a sequence of `u8` are not all…",N,N],[3,"Chars",E,"A copying iterator over the characters of an `AsciiStr`.",N,N],[3,R[52],E,"A mutable iterator over the characters of an `AsciiStr`.",N,N],[3,R[53],E,"An immutable iterator over the characters of an `AsciiStr`.",N,N],[4,R[49],E,"An ASCII character. It wraps a `u8`, with the highest bit…",N,N],[13,"Null",E,"`'\\0'`",0,N],[13,"SOH",E,"Start Of Heading",0,N],[13,"SOX",E,"Start Of teXt",0,N],[13,"ETX",E,"End of TeXt",0,N],[13,"EOT",E,"End Of Transmission",0,N],[13,"ENQ",E,"Enquiry",0,N],[13,"ACK",E,"Acknowledgement",0,N],[13,"Bell",E,"bell / alarm / audible",0,N],[13,"BackSpace",E,"Backspace",0,N],[13,"Tab",E,"`'\\t'`",0,N],[13,"LineFeed",E,"`'\\n'`",0,N],[13,"VT",E,"Vertical tab",0,N],[13,"FF",E,"Form Feed",0,N],[13,"CarriageReturn",E,"`'\\r'`",0,N],[13,"SI",E,"Shift In",0,N],[13,"SO",E,"Shift Out",0,N],[13,"DLE",E,"Data Link Escape",0,N],[13,"DC1",E,"Device control 1, often XON",0,N],[13,"DC2",E,"Device control 2",0,N],[13,"DC3",E,"Device control 3, Often XOFF",0,N],[13,"DC4",E,"Device control 4",0,N],[13,"NAK",E,"Negative AcKnowledgement",0,N],[13,"SYN",E,"Synchronous idle",0,N],[13,"ETB",E,"End of Transmission Block",0,N],[13,"CAN",E,"Cancel",0,N],[13,"EM",E,"End of Medium",0,N],[13,"SUB",E,"Substitute",0,N],[13,"ESC",E,"Escape",0,N],[13,"FS",E,"File Separator",0,N],[13,"GS",E,"Group Separator",0,N],[13,"RS",E,"Record Separator",0,N],[13,"US",E,"Unit Separator",0,N],[13,"Space",E,"`' '`",0,N],[13,"Exclamation",E,"`'!'`",0,N],[13,"Quotation",E,"`'\"'`",0,N],[13,"Hash",E,"`'#'`",0,N],[13,"Dollar",E,"`'$'`",0,N],[13,"Percent",E,"`'%'`",0,N],[13,"Ampersand",E,"`'&'`",0,N],[13,"Apostrophe",E,"`'\\''`",0,N],[13,"ParenOpen",E,"`'('`",0,N],[13,"ParenClose",E,"`')'`",0,N],[13,"Asterisk",E,"`'*'`",0,N],[13,"Plus",E,"`'+'`",0,N],[13,"Comma",E,"`','`",0,N],[13,"Minus",E,"`'-'`",0,N],[13,"Dot",E,"`'.'`",0,N],[13,"Slash",E,"`'/'`",0,N],[13,"_0",E,"`'0'`",0,N],[13,"_1",E,"`'1'`",0,N],[13,"_2",E,"`'2'`",0,N],[13,"_3",E,"`'3'`",0,N],[13,"_4",E,"`'4'`",0,N],[13,"_5",E,"`'5'`",0,N],[13,"_6",E,"`'6'`",0,N],[13,"_7",E,"`'7'`",0,N],[13,"_8",E,"`'8'`",0,N],[13,"_9",E,"`'9'`",0,N],[13,"Colon",E,"`':'`",0,N],[13,"Semicolon",E,"`';'`",0,N],[13,"LessThan",E,"`'<'`",0,N],[13,"Equal",E,"`'='`",0,N],[13,"GreaterThan",E,"`'>'`",0,N],[13,"Question",E,"`'?'`",0,N],[13,"At",E,"`'@'`",0,N],[13,"A",E,"`'A'`",0,N],[13,"B",E,"`'B'`",0,N],[13,"C",E,"`'C'`",0,N],[13,"D",E,"`'D'`",0,N],[13,"E",E,"`'E'`",0,N],[13,"F",E,"`'F'`",0,N],[13,"G",E,"`'G'`",0,N],[13,"H",E,"`'H'`",0,N],[13,"I",E,"`'I'`",0,N],[13,"J",E,"`'J'`",0,N],[13,"K",E,"`'K'`",0,N],[13,"L",E,"`'L'`",0,N],[13,"M",E,"`'M'`",0,N],[13,"N",E,"`'N'`",0,N],[13,"O",E,"`'O'`",0,N],[13,"P",E,"`'P'`",0,N],[13,"Q",E,"`'Q'`",0,N],[13,"R",E,"`'R'`",0,N],[13,"S",E,"`'S'`",0,N],[13,"T",E,"`'T'`",0,N],[13,"U",E,"`'U'`",0,N],[13,"V",E,"`'V'`",0,N],[13,"W",E,"`'W'`",0,N],[13,"X",E,"`'X'`",0,N],[13,"Y",E,"`'Y'`",0,N],[13,"Z",E,"`'Z'`",0,N],[13,"BracketOpen",E,"`'['`",0,N],[13,"BackSlash",E,"`'\\'`",0,N],[13,"BracketClose",E,"`']'`",0,N],[13,"Caret",E,"`'_'`",0,N],[13,"UnderScore",E,"`'_'`",0,N],[13,"Grave",E,"`'`'`",0,N],[13,"a",E,"`'a'`",0,N],[13,"b",E,"`'b'`",0,N],[13,"c",E,"`'c'`",0,N],[13,"d",E,"`'d'`",0,N],[13,"e",E,"`'e'`",0,N],[13,"f",E,"`'f'`",0,N],[13,"g",E,"`'g'`",0,N],[13,"h",E,"`'h'`",0,N],[13,"i",E,"`'i'`",0,N],[13,"j",E,"`'j'`",0,N],[13,"k",E,"`'k'`",0,N],[13,"l",E,"`'l'`",0,N],[13,"m",E,"`'m'`",0,N],[13,"n",E,"`'n'`",0,N],[13,"o",E,"`'o'`",0,N],[13,"p",E,"`'p'`",0,N],[13,"q",E,"`'q'`",0,N],[13,"r",E,"`'r'`",0,N],[13,"s",E,"`'s'`",0,N],[13,T,E,"`'t'`",0,N],[13,U,E,"`'u'`",0,N],[13,"v",E,"`'v'`",0,N],[13,"w",E,"`'w'`",0,N],[13,"x",E,"`'x'`",0,N],[13,"y",E,"`'y'`",0,N],[13,"z",E,"`'z'`",0,N],[13,"CurlyBraceOpen",E,"`'{'`",0,N],[13,"VerticalBar",E,"`'|'`",0,N],[13,"CurlyBraceClose",E,"`'}'`",0,N],[13,"Tilde",E,"`'~'`",0,N],[13,"DEL",E,"Delete",0,N],[5,"caret_encode",E,"Terminals use caret notation to display some typed control…",N,[[["into",["u8"]],["copy"],["u8"]],[[R[0]],[R[1],[R[0]]]]]],[5,"caret_decode",E,"Returns the control code represented by a caret notation…",N,[[["into",["u8"]],["copy"],["u8"]],[[R[0]],[R[1],[R[0]]]]]],[11,R[7],E,R[3],0,[[["toasciichar"]],[[R[2]],[R[8],[R[2]]]]]],[11,"new",E,"Create an `AsciiChar` from a `char`, panicking if it's not…",0,[[["char"]],[R[0]]]],[11,R[11],E,R[3],0,[[["u8"]],["self"]]],[11,"as_byte",E,"Converts an ASCII character into a `u8`.",0,[[],["u8"]]],[11,"as_char",E,"Converts an ASCII character into a `char`.",0,[[],["char"]]],[11,"is_alphabetic",E,"Check if the character is a letter (a-z, A-Z)",0,[[],["bool"]]],[11,"is_ascii_alphabetic",E,"Check if the character is a letter (a-z, A-Z).",0,[[["self"]],["bool"]]],[11,"is_digit",E,"Check if the character is a digit in the given radix.",0,[[["u32"]],["bool"]]],[11,"is_ascii_digit",E,"Check if the character is a number (0-9)",0,[[["self"]],["bool"]]],[11,"is_alphanumeric",E,R[4],0,[[],["bool"]]],[11,"is_ascii_alphanumeric",E,R[4],0,[[["self"]],["bool"]]],[11,"is_ascii_blank",E,"Check if the character is a space or horizontal tab",0,[[["self"]],["bool"]]],[11,"is_whitespace",E,"Check if the character one of ' ', '\\t', '\\n', '\\r',…",0,[[],["bool"]]],[11,"is_ascii_whitespace",E,"Check if the character is a ' ', '\\t', '\\n', '\\r' or…",0,[[["self"]],["bool"]]],[11,"is_ascii_control",E,"Check if the character is a control character",0,[[["self"]],["bool"]]],[11,"is_ascii_graphic",E,"Checks if the character is printable (except space)",0,[[["self"]],["bool"]]],[11,"is_ascii_printable",E,"Checks if the character is printable (including space)",0,[[["self"]],["bool"]]],[11,"is_lowercase",E,R[5],0,[[],["bool"]]],[11,"is_ascii_lowercase",E,R[5],0,[[["self"]],["bool"]]],[11,"is_uppercase",E,R[6],0,[[],["bool"]]],[11,"is_ascii_uppercase",E,R[6],0,[[["self"]],["bool"]]],[11,"is_ascii_punctuation",E,"Checks if the character is punctuation",0,[[["self"]],["bool"]]],[11,"is_ascii_hexdigit",E,"Checks if the character is a valid hex digit",0,[[["self"]],["bool"]]],[11,"as_printable_char",E,"Unicode has printable versions of the ASCII control codes,…",0,[[],["char"]]],[11,R[13],E,"Replaces letters `a` to `z` with `A` to `Z`",0,[[["self"]]]],[11,R[14],E,"Replaces letters `A` to `Z` with `a` to `z`",0,[[["self"]]]],[11,"to_ascii_uppercase",E,"Maps letters a-z to A-Z and returns any other character…",0,[[["self"]],["self"]]],[11,"to_ascii_lowercase",E,"Maps letters A-Z to a-z and returns any other character…",0,[[["self"]],["self"]]],[11,R[12],E,"Compares two characters case-insensitively.",0,[[["self"]],["bool"]]],[11,R[16],E,R[17],1,[[["self"]],["str"]]],[11,"as_str",E,"Converts `&self` to a `&str` slice.",2,[[["self"]],["str"]]],[11,"as_bytes",E,"Converts `&self` into a byte slice.",2,[[["self"]]]],[11,"as_slice",E,"Returns the entire string as slice of `AsciiChar`s.",2,[[["self"]]]],[11,"as_mut_slice",E,"Returns the entire string as mutable slice of `AsciiChar`s.",2,[[["self"]]]],[11,"as_ptr",E,"Returns a raw pointer to the `AsciiStr`'s buffer.",2,[[["self"]]]],[11,"as_mut_ptr",E,"Returns an unsafe mutable pointer to the `AsciiStr`'s…",2,[[["self"]]]],[11,R[7],E,"Converts anything that can represent a byte slice into an…",2,[[["b"]],[[R[10]],[R[9]],[R[8],[R[9],R[10]]]]]],[11,R[11],E,"Converts anything that can be represented as a byte slice…",2,[[],[R[9]]]],[11,"len",E,"Returns the number of characters / bytes in this ASCII…",2,[[["self"]],["usize"]]],[11,"is_empty",E,"Returns true if the ASCII slice contains zero bytes.",2,[[["self"]],["bool"]]],[11,"chars",E,"Returns an iterator over the characters of the `AsciiStr`.",2,[[["self"]],["chars"]]],[11,"chars_mut",E,"Returns an iterator over the characters of the `AsciiStr`…",2,[[["self"]],["charsmut"]]],[11,"split",E,"Returns an iterator over parts of the `AsciiStr` separated…",2,[[["self"],[R[0]]]]],[11,"lines",E,"Returns an iterator over the lines of the `AsciiStr`,…",2,[[["self"]]]],[11,"trim",E,"Returns an ASCII string slice with leading and trailing…",2,[[["self"]],["self"]]],[11,"trim_start",E,"Returns an ASCII string slice with leading whitespace…",2,[[["self"]],["self"]]],[11,"trim_end",E,"Returns an ASCII string slice with trailing whitespace…",2,[[["self"]],["self"]]],[11,R[12],E,"Compares two strings case-insensitively.",2,[[["self"]],["bool"]]],[11,R[13],E,"Replaces lowercase letters with their uppercase equivalent.",2,[[["self"]]]],[11,R[14],E,"Replaces uppercase letters with their lowercase equivalent.",2,[[["self"]]]],[11,"first",E,"Returns the first character if the string is not empty.",2,[[["self"]],[[R[0]],[R[1],[R[0]]]]]],[11,"last",E,"Returns the last character if the string is not empty.",2,[[["self"]],[[R[0]],[R[1],[R[0]]]]]],[11,"as_str",E,R[15],3,[[["self"]],[R[9]]]],[11,"into_str",E,R[15],4,[[],[R[9]]]],[11,"as_str",E,R[15],5,[[["self"]],[R[9]]]],[11,"valid_up_to",E,"Returns the index of the first non-ASCII byte.",6,[[],["usize"]]],[11,R[16],E,R[17],6,[[["self"]],["str"]]],[8,R[55],E,"Convert `char`, `u8` and other character types to…",N,N],[10,R[27],E,"Convert to `AsciiChar` without checking that it is an…",7,[[],[R[0]]]],[10,R[26],E,"Convert to `AsciiChar`.",7,[[],[[R[2]],[R[8],[R[0],R[2]]],[R[0]]]]],[8,R[56],E,"Convert slices of bytes or AsciiChar to `AsciiStr`.",N,N],[10,R[28],E,R[18],8,[[["self"],["r"]],[[R[10]],[R[9]],[R[8],[R[9],R[10]]]]]],[11,R[29],E,R[45],8,[[["self"]],[[R[10]],[R[9]],[R[8],[R[9],R[10]]]]]],[11,R[31],E,R[46],8,[[["self"],["usize"]],[[R[0]],[R[1],[R[0]]]]]],[10,R[30],E,"Convert to an ASCII slice without checking for non-ASCII…",8,[[["self"]],[R[9]]]],[8,R[57],E,"Convert mutable slices of bytes or AsciiChar to `AsciiStr`.",N,N],[10,R[32],E,R[18],9,[[["self"],["r"]],[[R[9]],[R[8],[R[9],R[10]]],[R[10]]]]],[11,R[47],E,R[48],9,[[["self"]],[[R[9]],[R[8],[R[9],R[10]]],[R[10]]]]],[10,R[33],E,"Convert to a mutable ASCII slice without checking for…",9,[[["self"]],[R[9]]]],[11,R[20],E,E,1,[[[U]],[R[8]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[8]]]],[11,R[24],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[25]]]],[11,R[24],E,E,2,[[["self"]],[T]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[R[25]]]],[11,R[20],E,E,6,[[[U]],[R[8]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[],[R[8]]]],[11,R[24],E,E,6,[[["self"]],[T]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[R[25]]]],[11,R[20],E,E,3,[[[U]],[R[8]]]],[11,R[23],E,E,3,[[],["i"]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[8]]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[R[25]]]],[11,R[20],E,E,4,[[[U]],[R[8]]]],[11,R[23],E,E,4,[[],["i"]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[],[R[8]]]],[11,R[24],E,E,4,[[["self"]],[T]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[R[25]]]],[11,R[20],E,E,5,[[[U]],[R[8]]]],[11,R[23],E,E,5,[[],["i"]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[],[R[8]]]],[11,R[24],E,E,5,[[["self"]],[T]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[R[25]]]],[11,R[20],E,E,0,[[[U]],[R[8]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[8]]]],[11,R[24],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[25]]]],[11,R[26],E,E,0,[[],[[R[2]],[R[8],[R[0],R[2]]],[R[0]]]]],[11,R[27],E,E,0,[[],[R[0]]]],[11,R[28],E,E,2,[[["self"],["r"]],[[R[10]],[R[9]],[R[8],[R[9],R[10]]]]]],[11,R[29],E,E,2,[[["self"]],[[R[10]],[R[9]],[R[8],[R[9],R[10]]]]]],[11,R[30],E,E,2,[[["self"]],[R[9]]]],[11,R[31],E,E,2,[[["self"],["usize"]],[[R[0]],[R[1],[R[0]]]]]],[11,R[32],E,E,2,[[["self"],["r"]],[[R[9]],[R[8],[R[9],R[10]]],[R[10]]]]],[11,R[33],E,E,2,[[["self"]],[R[9]]]],[11,"eq",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,0,[[["self"],["u8"]],["bool"]]],[11,"eq",E,E,0,[[["self"],["char"]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[2]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[2]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"eq",E,E,2,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,2,[[["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[10]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[10]]],["bool"]]],[11,"cmp",E,E,0,[[["self"],[R[0]]],[R[34]]]],[11,"cmp",E,E,2,[[["self"],[R[9]]],[R[34]]]],[11,R[35],E,E,0,[[["self"],[R[0]]],[[R[34]],[R[1],[R[34]]]]]],[11,R[35],E,E,0,[[["self"],["u8"]],[[R[34]],[R[1],[R[34]]]]]],[11,R[35],E,E,0,[[["self"],["char"]],[[R[34]],[R[1],[R[34]]]]]],[11,R[35],E,E,2,[[["self"],[R[9]]],[[R[34]],[R[1],[R[34]]]]]],[11,"lt",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"le",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"gt",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"ge",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"fmt",E,E,0,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,1,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,2,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,6,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,0,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,1,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,2,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,3,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,4,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,5,[[["self"],[R[36]]],[R[8]]]],[11,"fmt",E,E,6,[[["self"],[R[36]]],[R[8]]]],[11,"index",E,E,2,[[["self"],["range",["usize"]],["usize"]],[R[9]]]],[11,"index",E,E,2,[[["self"],["rangeto",["usize"]],["usize"]],[R[9]]]],[11,"index",E,E,2,[[["self"],[R[38],["usize"]],["usize"]],[R[9]]]],[11,"index",E,E,2,[[["self"],[R[39]]],[R[9]]]],[11,"index",E,E,2,[[["self"],[R[40],["usize"]],["usize"]],[R[9]]]],[11,"index",E,E,2,[[["self"],[R[41],["usize"]],["usize"]],[R[9]]]],[11,"index",E,E,2,[[["self"],["usize"]],[R[0]]]],[11,R[37],E,E,2,[[["self"],["range",["usize"]],["usize"]],[R[9]]]],[11,R[37],E,E,2,[[["self"],["rangeto",["usize"]],["usize"]],[R[9]]]],[11,R[37],E,E,2,[[["self"],[R[38],["usize"]],["usize"]],[R[9]]]],[11,R[37],E,E,2,[[["self"],[R[39]]],[R[9]]]],[11,R[37],E,E,2,[[["self"],[R[40],["usize"]],["usize"]],[R[9]]]],[11,R[37],E,E,2,[[["self"],[R[41],["usize"]],["usize"]],[R[9]]]],[11,R[37],E,E,2,[[["self"],["usize"]],[R[0]]]],[11,R[42],E,E,3,[[["self"]],[[R[0]],[R[1],[R[0]]]]]],[11,R[42],E,E,4,[[["self"]],[[R[0]],[R[1],[R[0]]]]]],[11,R[42],E,E,5,[[["self"]],[[R[0]],[R[1],[R[0]]]]]],[11,"next",E,E,3,[[["self"]],[[R[0]],[R[1],[R[0]]]]]],[11,R[43],E,E,3,[[["self"]]]],[11,"next",E,E,4,[[["self"]],[[R[0]],[R[1],[R[0]]]]]],[11,R[43],E,E,4,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[[R[0]],[R[1],[R[0]]]]]],[11,R[43],E,E,5,[[["self"]]]],[11,"len",E,E,3,[[["self"]],["usize"]]],[11,"len",E,E,4,[[["self"]],["usize"]]],[11,R[44],E,E,2,[[["self"]]]],[11,R[44],E,E,2,[[["self"]],["str"]]],[11,R[44],E,E,2,[[["self"]]]],[11,R[44],E,E,2,[[["self"]],[R[9]]]],[11,R[44],E,E,0,[[["self"]],[R[9]]]],[11,"as_mut",E,E,2,[[["self"]]]],[11,"as_mut",E,E,2,[[["self"]],[R[9]]]],[11,"clone",E,E,0,[[["self"]],[R[0]]]],[11,"clone",E,E,1,[[["self"]],[R[2]]]],[11,"clone",E,E,3,[[["self"]],["chars"]]],[11,"clone",E,E,5,[[["self"]],["charsref"]]],[11,"clone",E,E,6,[[["self"]],[R[10]]]],[11,"default",E,E,0,[[],[R[0]]]],[11,R[29],E,R[45],8,[[["self"]],[[R[10]],[R[9]],[R[8],[R[9],R[10]]]]]],[11,R[31],E,R[46],8,[[["self"],["usize"]],[[R[0]],[R[1],[R[0]]]]]],[11,R[47],E,R[48],9,[[["self"]],[[R[9]],[R[8],[R[9],R[10]]],[R[10]]]]]],"p":[[4,R[49]],[3,R[50]],[3,R[51]],[3,"Chars"],[3,R[52]],[3,R[53]],[3,R[54]],[8,R[55]],[8,R[56]],[8,R[57]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);